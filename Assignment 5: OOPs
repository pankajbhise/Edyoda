#Challenge 1: Square Numbers and Return Their Sum

class Point:
  def __init__(self, x, y, z):
    self.x = x
    self.y = y
    self.z = z

  def Sqsum(self):
    a = self.x **2
    b = self.y **2
    c = self.z **2
    return(a+b+c)

num = Point(1,3,5)
num.Sqsum()

___________________________________________________________________

#Challenge 2: Implement a Calculator Class

class Calculator:
  def __init__(self, x, y):
    self.x = x
    self.y = y

  def add(self):
    add = self.x + self.y
    return add

  def subtract(self):
    sub = self.y - self.x
    return sub

  def multiply(self):
    mul = self.x * self.y
    return mul

  def divide(self):
    div = self.y / self.x
    return div

obj = Calculator(10,94)
obj.add()
obj.subtract()
obj.multiply()
obj.divide()


_________________________________________________________________________


#Challenge 3: Implement the Complete Student Class

class Student:
  def __init__(self, Name = 'Raj', RollNumber = 10):
    self._Name = Name
    self._RollNumber = RollNumber

  def getName(self):
    return self._Name

  def setName(self,x):
    self._Name = x

  def getRollNumber(self):
    return self._RollNumber

  def setRollNumber(self,y):
    self._RollNumber = y

obj  = Student()
obj.setName('Pankaj')
obj.getName()
obj.setRollNumber(2)
obj.getRollNumber()

_____________________________________________________________________

#Challenge 4: Implement a Banking Account

class Account:
  def __init__(self, title , balance):
    self.title = title
    self.balance = balance

    # write your code here

class SavingsAccount(Account):
  def __init__(self,title, balance, interestRate):
    super().__init__(title,balance)
    self.interestRate = interestRate

account = Account("Ashish", 5000)
SAccount = SavingsAccount("Ashish", 5000, 5)
account.title
account.balance
SAccount.interestRate

_________________________________________________________________________


#Challenge 5: Handling a Bank Account

class Account:
  def __init__(self, title=None, balance=0):
    self.title = title
    self.balance = balance

  def withdrawal(self, amount):
    if self.balance >= amount:
      self.balance -= amount
    else:
      print("Insufficient funds")

  def deposit(self, amount):
    self.balance += amount

  def getBalance(self):
    return self.balance

class SavingsAccount(Account):
  def __init__(self,title, balance, interestRate):
    super().__init__(title,balance)
    self.interestRate = interestRate

  def interestAmount(self):
    return (self.interestRate * self.balance)//100

account = Account("Ashish", 2000)
account.deposit(500)
account.getBalance()
account.withdrawal(500)
account.getBalance()
saccount = SavingsAccount("Ashish", 2000, 5)
saccount.interestAmount()









